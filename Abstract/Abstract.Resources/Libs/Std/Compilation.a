###    ABSTRACT STANDARD LIBRARY SCRIPT    ###

namespace Compilation {

    @public @comptime @externInterface const Std.System.Archtecture targetArch
    @public @comptime @externInterface const uptr currentLine
    @public @comptime @externInterface const uptr currentColumn
    @public @comptime @externInterface const string currentSource
    @public @comptime @externInterface const string functionName

    namespace Link {

        @public @comptime @externalInterface func void DefineEntryPoint()

    }
    
    namespace Types {

        @public @abstract @comptimeOnly @valueOnly @final struct ComptimeString {

            @implicitConvert @public @static @comptime func string asstring(ComptimeString value)

            @comptime @inline
            @overrideOperator("+") @public @static func string concatenate(ComptimeString left, string right) {
                return asstring(left) + right;
            }
            @comptime @inline
            @overrideOperator("+") @public @static func string concatenate(ComptimeString base, char character) {
                return asstring(base) + character;
            }
            @comptime @inline
            @overrideOperator("+") @public @static func string concatenate(ComptimeString base, []char characters) {
                return asstring(base) + characters;
            }

            # FIXME anytype is not so much specific here
            @comptime @inline
            @overrideOperator("+") @public @static func string concatenate(ComptimeString base, anytype value) {
                return asstring(base) + value;
            }

            @overrideOperator("+") @comptime @inline
            @externInterface @public @static func string comptimeConcatenate(ComptimeString left, ComptimeString right)
        }

        @public @abstract @comptimeOnly @valueOnly @final struct ComptimeInteger {

            @implicitConvert @public @static @comptime func i8 asi8(ComptimeInteger value)
            @implicitConvert @public @static @comptime func i16 asi16(ComptimeInteger value)
            @implicitConvert @public @static @comptime func i32 asi32(ComptimeInteger value)
            @implicitConvert @public @static @comptime func i64 asi64(ComptimeInteger value)
            @implicitConvert @public @static @comptime func i128 asi128(ComptimeInteger value)
            @implicitConvert @public @static @comptime func u8 asu8(ComptimeInteger value)
            @implicitConvert @public @static @comptime func u16 asu16(ComptimeInteger value)
            @implicitConvert @public @static @comptime func u32 asu32(ComptimeInteger value)
            @implicitConvert @public @static @comptime func u64 asu64(ComptimeInteger value)
            @implicitConvert @public @static @comptime func u128 asu128(ComptimeInteger value)

            @implicitConvert @public @static @comptime func f32 asf32(ComptimeInteger value)
            @implicitConvert @public @static @comptime func f64 asf64(ComptimeInteger value)

        }

        @public @abstract @comptimeOnly @valueOnly @final struct ComptimeFloating {

            @implicitConvert @public @static @comptime func f32 asf32(ComptimeFloating value)
            @implicitConvert @public @static @comptime func f64 asf64(ComptimeFloating value)

        }

        @public @abstract @comptimeOnly @valueOnly @final struct ComptimeBoolean {

            @implicitConvert @public @static @comptime func bool asbool(ComptimeBoolean value)
            
        }

    }
    
    @public enum Operator {
        # assign and reading operators
        assign,
        read,

        # Binary math operators
        addition,
        subtraction,
        multiplication,
        division,
        remainder,

        # Binary boolean operators
        equals,
        notEquals,
        lesserThan,
        greaterThan,
        lesserEqualThan,
        greaterEqualThan
    }

}
